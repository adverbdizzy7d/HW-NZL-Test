name: Crawler & Push

on:
  workflow_dispatch: {}
  schedule:
    # every 4 hours
    - cron: '0 */4 * * *'

permissions:
  contents: write
  pull-requests: write

jobs:
  run-crawler:
    runs-on: windows-latest

    steps:
      - name: Checkout (main)
        uses: actions/checkout@v4
        with:
          persist-credentials: true

      - name: Run Crawler.ps1 (Repo-Root)
        shell: pwsh
        run: |
          git config --global core.longpaths true
          & "$env:GITHUB_WORKSPACE\Crawler.ps1"
          if ($LASTEXITCODE -ne 0) { exit $LASTEXITCODE }

      - name: Commit & push CSVs to main (skip in PRs)
        if: ${{ github.event_name == 'schedule' || github.event_name == 'workflow_dispatch' }}
        shell: pwsh
        run: |
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config user.name  "github-actions[bot]"

          # Stage all changes first, then unstage raw/
          git add -A
          git reset HEAD -- raw/

          # Only commit if there are changes (e.g. CSVs)
          git diff --cached --quiet
          if ($LASTEXITCODE -eq 0) {
            Write-Host "No CSV changes - nothing to commit for main."
          } else {
            $msg = "CSV Update via GitHub Actions ${{ github.run_id }} [skip ci]"
            git commit -m "$msg"
            git push origin HEAD:${{ github.ref_name }}
          }

      # ================== PR gegen raw-data NUR mit RAW-Dateien ==================

      - name: Prepare identifiers & sparse list (RAW only)
        id: prep
        shell: pwsh
        run: |
          $ts = (Get-Date).ToUniversalTime().ToString("yyyyMMdd-HHmmssZ")
          "ts=$ts" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append

          $ws = $env:GITHUB_WORKSPACE
          $sparseFile = Join-Path $ws 'sparse.txt'
          if (Test-Path $sparseFile) { Remove-Item $sparseFile -Force }

          # Alle NEU erzeugten RAW-Dateien dieses Runs
          $rawRoot = Join-Path $ws 'raw'
          if (Test-Path $rawRoot) {
            Get-ChildItem -Path $rawRoot -Recurse -File | ForEach-Object {
              $rel = [IO.Path]::GetRelativePath($ws, $_.FullName).Replace('\','/')
              "/$rel" | Out-File -FilePath $sparseFile -Append -Encoding utf8
            }
          }

          $count = (Test-Path $sparseFile) ? ((Get-Content $sparseFile).Count) : 0
          "paths_count=$count" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append

      - name: Skip PR if nothing to push
        if: ${{ steps.prep.outputs.paths_count == '0' }}
        run: echo "No RAW changes for raw-data PR."

      - name: Partial + Sparse clone raw-data branch (no blobs)
        if: ${{ steps.prep.outputs.paths_count != '0' }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: pwsh
        run: |
          $repo = $env:GITHUB_REPOSITORY
          $url  = "https://x-access-token:$env:GH_TOKEN@github.com/$repo.git"

          git clone --filter=blob:none --no-checkout --depth=1 --branch raw-data "$url" raw-data

          git -C raw-data config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git -C raw-data config user.name  "github-actions[bot]"

          # Sparse-Checkout nur für die *konkreten* neuen RAW-Dateien
          git -C raw-data sparse-checkout init --no-cone
          $target = Join-Path $env:GITHUB_WORKSPACE 'raw-data\.git\info\sparse-checkout'
          Copy-Item (Join-Path $env:GITHUB_WORKSPACE 'sparse.txt') $target -Force

          # Arbeitsbaum befüllen (für neue RAW-Dateien gibt es remote noch nichts → kein Blob-Download)
          git -C raw-data checkout

      - name: Create feature branch, copy RAW, commit & push (based on raw-data)
        id: push_raw
        if: ${{ steps.prep.outputs.paths_count != '0' }}
        shell: pwsh
        run: |
          $ts = "${{ steps.prep.outputs.ts }}"
          $branch = "raw/${{ github.run_id }}-$ts"

          # Branch vom raw-data-Head
          git -C raw-data switch -c $branch

          # RAW-Dateien rüberkopieren (nur die neuen dieses Runs)
          $srcRaw = Join-Path $env:GITHUB_WORKSPACE 'raw'
          if (Test-Path $srcRaw) {
            $dstRaw = Join-Path $env:GITHUB_WORKSPACE 'raw-data\raw'
            New-Item -ItemType Directory -Path $dstRaw -Force | Out-Null
            robocopy $srcRaw $dstRaw /E /NFL /NDL /NJH /NJS /NC /NS /XO | Out-Null
            if ($LASTEXITCODE -ge 8) { Write-Error "Robocopy (RAW) failed with code $LASTEXITCODE"; exit $LASTEXITCODE }
          }

          Push-Location raw-data
          git add -A
          git diff --cached --quiet
          if ($LASTEXITCODE -eq 0) {
            Write-Host "No changes to commit for raw-data."
            "branch_created=false" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
            Pop-Location
            exit 0
          }

          $msg = "RAW JSONs via GitHub Actions ${{ github.run_id }}"
          git commit -m "$msg"
          git push origin HEAD
          Pop-Location

          "branch_created=true" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
          "branch_name=$branch" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append

      - name: Create PR for RAW data (base raw-data) & enable auto-merge
        if: success() && steps.push_raw.outputs.branch_created == 'true'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: pwsh
        run: |
          $head = "${{ steps.push_raw.outputs.branch_name }}"
          $pr_title = "RAW Data Update ${{ steps.prep.outputs.ts }} (run_id=${{ github.run_id }})"
          $pr_body  = "Adds new RAW JSONs only (no CSVs). Partial + sparse clone keeps PR minimal."
          $pr_url = gh pr create --base raw-data --head $head --title $pr_title --body $pr_body
          # Serverseitiges Auto-Merge → reduziert 504-Risiko
          gh pr merge $pr_url --merge --admin --delete-branch
